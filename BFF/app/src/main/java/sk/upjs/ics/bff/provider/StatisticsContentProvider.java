package sk.upjs.ics.bff.provider;

import android.content.ContentProvider;
import android.content.ContentUris;
import android.content.ContentValues;
import android.content.UriMatcher;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.net.Uri;
import android.widget.Toast;

import sk.upjs.ics.bff.util.Defaults;

import static android.content.ContentResolver.SCHEME_CONTENT;

public class StatisticsContentProvider extends ContentProvider {

    private static final int URI_MATCH_NOTES = 0;

    private static final int URI_MATCH_NOTE_BY_ID = 1;

    private static final int URI_MATCH_USERS = 2;

    private static final int URI_MATCH_BY_ID = 3;

    private static final int URI_MATCH_ALCOHOL = 4;

    public static final String AUTHORITY = "StatisticsContentProvider";

    public static final Uri CONTENT_URI_STATISTICS = new Uri.Builder()
            .scheme(SCHEME_CONTENT)
            .authority(AUTHORITY)
            .appendPath(Provider.statistics.TABLE_NAME)
            .build();
    public static final Uri CONTENT_URI_USER = new Uri.Builder()
            .scheme(SCHEME_CONTENT)
            .authority(AUTHORITY)
            .appendPath(Provider.user.TABLE_NAME)
            .build();

    public static final Uri CONTENT_URI_ALCOHOL = new Uri.Builder()
            .scheme(SCHEME_CONTENT)
            .authority(AUTHORITY)
            .appendPath(Provider.alcohol.TABLE_NAME)
            .build();

    private DatabaseOpenHelper databaseOpenHelper;

    private UriMatcher uriMatcher = new UriMatcher(UriMatcher.NO_MATCH);

    public StatisticsContentProvider() {
    }

    @Override
    public int delete(Uri uri, String selection, String[] selectionArgs) {
        // Implement this to handle requests to delete one or more rows.
        throw new UnsupportedOperationException("Not yet implemented");
    }

    @Override
    public String getType(Uri uri) {
        // TODO: Implement this to handle requests for the MIME type of the data
        // at the given URI.
        throw new UnsupportedOperationException("Not yet implemented");
    }

    @Override
    public Uri insert(Uri uri, ContentValues values) {
        switch (uriMatcher.match(uri)) {
            case URI_MATCH_NOTES:
                Uri newItemUri = saveNote(values);
                getContext().getContentResolver().notifyChange(CONTENT_URI_STATISTICS, Defaults.NO_CONTENT_OBSERVER);
                return newItemUri;
            default:
                return Defaults.NO_URI;
        }
    }

    private Uri saveNote(ContentValues values) {
        ContentValues statistika = new ContentValues();
        statistika.put(Provider.statistics._ID, Defaults.AUTOGENERATED_ID);
        statistika.put(Provider.statistics.ID_ALCOHOL, values.getAsString(Provider.statistics.ID_ALCOHOL));
        statistika.put(Provider.statistics.TIMESTAMP, System.currentTimeMillis() / 1000);

        SQLiteDatabase db = databaseOpenHelper.getWritableDatabase();
        long newId = db.insert(Provider.statistics.TABLE_NAME, Defaults.NO_NULL_COLUMN_HACK, statistika);
        return ContentUris.withAppendedId(CONTENT_URI_STATISTICS, newId);
    }

    @Override
    public boolean onCreate() {
        this.databaseOpenHelper = new DatabaseOpenHelper(getContext());
        uriMatcher.addURI(AUTHORITY, Provider.statistics.TABLE_NAME, URI_MATCH_NOTES);
        uriMatcher.addURI(AUTHORITY, Provider.statistics.TABLE_NAME + "/#", URI_MATCH_NOTE_BY_ID);

        uriMatcher.addURI(AUTHORITY, Provider.user.TABLE_NAME, URI_MATCH_USERS);
        uriMatcher.addURI(AUTHORITY, Provider.user.TABLE_NAME + "/#", URI_MATCH_BY_ID);

        uriMatcher.addURI(AUTHORITY, Provider.alcohol.TABLE_NAME, URI_MATCH_ALCOHOL);
        return true;
    }

    @Override
    public Cursor query(Uri uri, String[] projection, String selection,
                        String[] selectionArgs, String sortOrder) {
        Cursor cursor = null;
        switch (uriMatcher.match(uri)) {
            case URI_MATCH_NOTES:
                cursor = listNotes();
                cursor.setNotificationUri(getContext().getContentResolver(), uri);
                return cursor;
            case URI_MATCH_NOTE_BY_ID:
                long idNote = ContentUris.parseId(uri);
                cursor = findNoteById(idNote);
                return cursor;
            case URI_MATCH_USERS:
                cursor = listUsers();
                return cursor;
            case URI_MATCH_BY_ID:
                long idUser = ContentUris.parseId(uri);
                cursor = findById(idUser);
                return cursor;
            case URI_MATCH_ALCOHOL:
                cursor = listAlcohol();
                return cursor;

            default:
                return Defaults.NO_CURSOR;
        }
    }

    private Cursor listAlcohol() {
        SQLiteDatabase db = databaseOpenHelper.getReadableDatabase();
        return db.query(Provider.alcohol.TABLE_NAME, Defaults.ALL_COLUMNS, Defaults.NO_SELECTION, Defaults.NO_SELECTION_ARGS, Defaults.NO_GROUP_BY, Defaults.NO_HAVING, Defaults.NO_SORT_ORDER);
    }

    private Cursor findNoteById(long id) {
        SQLiteDatabase db = databaseOpenHelper.getReadableDatabase();
        String selection = Provider.statistics._ID + "=" + id;
        return db.query(Provider.statistics.TABLE_NAME, Defaults.ALL_COLUMNS, selection, Defaults.NO_SELECTION_ARGS, Defaults.NO_GROUP_BY, Defaults.NO_HAVING, Defaults.NO_SORT_ORDER);

    }

    private Cursor listNotes() {
        SQLiteDatabase db = databaseOpenHelper.getReadableDatabase();
        return db.query(Provider.statistics.TABLE_NAME, Defaults.ALL_COLUMNS, Defaults.NO_SELECTION, Defaults.NO_SELECTION_ARGS, Defaults.NO_GROUP_BY, Defaults.NO_HAVING, Defaults.NO_SORT_ORDER);
    }

    private Cursor findById(long id) {
        SQLiteDatabase db = databaseOpenHelper.getReadableDatabase();
        String selection = Provider.user._ID + "=" + id;
        return db.query(Provider.user.TABLE_NAME, Defaults.ALL_COLUMNS, selection, Defaults.NO_SELECTION_ARGS, Defaults.NO_GROUP_BY, Defaults.NO_HAVING, Defaults.NO_SORT_ORDER);

    }

    private Cursor listUsers() {
        SQLiteDatabase db = databaseOpenHelper.getReadableDatabase();
        return db.query(Provider.user.TABLE_NAME, Defaults.ALL_COLUMNS, Defaults.NO_SELECTION, Defaults.NO_SELECTION_ARGS, Defaults.NO_GROUP_BY, Defaults.NO_HAVING, Defaults.NO_SORT_ORDER);
    }


    @Override
    public int update(Uri uri, ContentValues values, String selection,
                      String[] selectionArgs) {
        switch (uriMatcher.match(uri)) {
            case URI_MATCH_BY_ID:
                ContentValues newInfo = new ContentValues();
                newInfo.put(Provider.user.NAME, values.getAsString(Provider.user.NAME));
                newInfo.put(Provider.user.WEIGHT, values.getAsInteger(Provider.user.WEIGHT));
                newInfo.put(Provider.user.BFF_NUMBER, values.getAsString(Provider.user.BFF_NUMBER));
                SQLiteDatabase db = databaseOpenHelper.getWritableDatabase();
                long id = ContentUris.parseId(uri);
                int affectedRows = db.update(Provider.user.TABLE_NAME, newInfo, Provider.user._ID + " = " + id, Defaults.NO_SELECTION_ARGS);
                getContext().getContentResolver().notifyChange(CONTENT_URI_USER, Defaults.NO_CONTENT_OBSERVER);
                return affectedRows;
            default:
                return 0;
        }
    }

}
